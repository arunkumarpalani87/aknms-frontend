{"version":3,"sources":["components/EventsTable.jsx","components/RefreshPoller.jsx","components/EventsChart.jsx","components/EventsLastSinceFilter.jsx","reducers/infiniteTableReducer.js","store/store.js","utilities/sort.js","components/InfiniteTable.jsx","components/EventsPage.jsx","index.js"],"names":["style","height","border","margin","padding","React","Component","EventsChart","props","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","state","chartdata","fetch","countResult","json","countJson","chartData","map","eventCountRecord","title","eventType","value","count","coloursArray","i","length","colour","then","_this2","chartEntry","color","setState","react_default","a","createElement","dist_default","data","radius","animate","infiniteTableReducer","arguments","undefined","rowdata","lastLoadedIndex","action","type","store","createStore","infinteTableReducer","compareValues","key","order","b","hasOwnProperty","varA","toUpperCase","varB","comparison","InfiniteTable","subscribe","forceUpdate","rowData","row","cellsArray","field","push","loadData","initialRecordCount","refs","iScroll","addEventListener","scrollTop","clientHeight","scrollHeight","additionalRecordCount","recordCount","getState","resultValue","resultJson","resultJsonDesc","toConsumableArray","sort","newlastLoadedIndex","id","newRow","managementIp","managedElement","ipAddress","assign","concat","dispatch","_this3","headers","className","ref","overflow","align","header","headername","createRow","defaultProps","EventsPage","fieldname","components_EventsChart","components_InfiniteTable","ReactDOM","render","components_EventsPage","document","getElementById"],"mappings":"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","file":"static/js/main.9a3c3ead.chunk.js","sourcesContent":["import React from \"react\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nconst style = {\n    height: 30,\n    border: \"1px solid green\",\n    margin: 6,\n    padding: 8\n};\n\nclass EventsTable extends React.Component {\n\n    state = {\n        items: Array.from({ length: 20 }),\n        hasMore: true\n    };\n\n    fetchMoreData = () => {\n        /*\n        let resultValue = fetch('http://localhost:8081/aknms/v1/event/')\n        .then(result => result.json());\n        console.log(resultValue);\n        this.setState({\n            items: this.state.items.concat(resultValue)\n        });\n        */\n\n        if (this.state.items.length >= 500) {\n            this.setState({ hasMore: false });\n            return;\n        }\n        // a fake async api call like which sends\n        // 20 more records in .5 secs\n        setTimeout(() => {\n            this.setState({\n                items: this.state.items.concat(Array.from({ length: 20 }))\n            });\n        }, 500);\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>demo: react-infinite-scroll-component</h1>\n                <hr />\n                <InfiniteScroll\n                    dataLength={this.state.items.length}\n                    next={this.fetchMoreData}\n                    hasMore={this.state.hasMore}\n                    loader={<h4>Loading...</h4>}\n                    height={800}\n                    endMessage={\n                        <p style={{ textAlign: \"center\" }}>\n                            <b>Yay! You have seen it all</b>\n                        </p>\n                    }\n                >\n                    {this.state.items.map((i, index) => (\n                        <div style={style} key={index}>\n                            {index}\n                        </div>\n                    ))}\n                </InfiniteScroll>\n            </div>\n        );\n    }\n}\n\nexport default EventsTable;\n","import React from \"react\";\n\nclass RefreshPoller extends React.Component {\n    \n    \n    render(){\n        return (\n            <div>\n                <h1>Hello, RefreshPoller</h1>\n            </div>\n        );\n\t}\n    \n}\nexport default RefreshPoller;\n","import React from \"react\";\nimport PieChart from 'react-minimal-pie-chart';\n\nclass EventsChart extends React.Component {\n    constructor(props) {\n        console.log(\"Calling EventsChart constructor\");\n        super(props);\n        this.state = {\n            chartdata: []\n        }\n        /*\n        Sample Data\n        this.data =\n            [\n                { title: 'One', value: 10, color: '#E38627' },\n                { title: 'Two', value: 15, color: '#C13C37' },\n                { title: 'Three', value: 20, color: '#6A2135' },\n            ];\n        */\n        console.log(\"EventsChart - state\", this.state);\n    }\n\n    // Unused Function - Not working\n    async fetchDataAsync() {\n        let countResult = await fetch('http://localhost:8080/aknms/v1/event/count');\n        let countJson = await countResult.json();\n        let chartData = countJson.map((eventCountRecord) => {\n            let chartEntry = {\n                title: eventCountRecord.eventType,\n                value: eventCountRecord.count\n            }\n            return chartEntry;\n        });\n        let coloursArray = ['#E38627', '#C13C37', '#6A2135', '#846968'];\n        for (let i = 0; i < chartData.length; i++) {\n            chartData[i].colour = coloursArray[i];\n        }\n        console.log(\"fetchData - chartData\", chartData.then());\n        return chartData;\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:8080/aknms/v1/event/count')\n            .then(countResult => countResult.json())\n            .then(countJson => {\n                countJson.map(eventCountRecord => {\n                    let chartEntry = {\n                        title: eventCountRecord.eventType,\n                        value: eventCountRecord.count\n                    }\n                    console.log(\"componentDidMount - chartEntry\", chartEntry);\n                    return chartEntry;\n                })\n                return countJson;\n            })\n            .then(chartData => {\n                console.log(\"componentDidMount - chartEntry\", chartData);\n                // Add more colours if the number of entries increase\n                let coloursArray = ['#E38627', '#C13C37', '#6A2135', '#846968'];\n                // construct the data for the chart\n                for (let i = 0; i < chartData.length; i++) {\n                    chartData[i].title = chartData[i].eventType;\n                    delete chartData[i].eventType;\n                    chartData[i].value = chartData[i].count;\n                    delete chartData[i].count;\n                    chartData[i].color = coloursArray[i];\n                }\n                this.setState({ chartdata: chartData });\n                console.log(\"componentDidMount - chartData\", chartData);\n            });\n    }\n\n    render() {\n        console.log(\"Calling EventsChart Render\");\n        console.log(\"Render - state\", this.state);\n        // TODO - Add Legend\n        if (typeof this.state.chartdata === 'undefined' || this.state.chartdata.length === 0) {\n            return (<div><b>Loading Chart</b></div>);\n        }\n        return (\n            <div>\n                <PieChart\n                    data={this.state.chartdata}\n                    radius={30}\n                    style={{ height: '300px' }}\n                    animate\n                />\n            </div>\n        );\n    }\n\n}\nexport default EventsChart;\n","import React from \"react\";\n\n\nclass EventsLastSinceFilter extends React.Component {\n    \n    \n    render(){\n        return (\n            <div>\n                <h1>Hello, EventsLastSinceFilter</h1>\n            </div>\n        );\n\t}\n}\nexport default EventsLastSinceFilter;","function infiniteTableReducer(state = {\n    rowdata : [],\n    lastLoadedIndex : 0\n}, action) {\n    console.log(\"Reducer Action\", action);\n    switch(action.type) {\n        case 'LOAD_DATA' :\n            console.log(\"Reducer table Mount - Curr State\", state);\n            console.log(\"Reducer table Mount - Action rowdata\", action.rowdata);\n            return {\n                rowdata : action.rowdata,\n                lastLoadedIndex : action.lastLoadedIndex\n            }\n        default :\n            return state;\n    }\n};\n\nexport default infiniteTableReducer;\n","import {createStore} from \"redux\";\n// import rootReducer from \"../reducers/reducer.js\";\nimport infinteTableReducer from '../reducers/infiniteTableReducer.js';\n\nconst store = createStore(infinteTableReducer);\n// const store = createStore(rootReducer);\n\nexport default store;","function compareValues(key, order='asc') {\n    return function(a, b) {\n      if(!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        // property doesn't exist on either object\n        return 0;\n      }\n  \n      const varA = (typeof a[key] === 'string') ?\n        a[key].toUpperCase() : a[key];\n      const varB = (typeof b[key] === 'string') ?\n        b[key].toUpperCase() : b[key];\n  \n      let comparison = 0;\n      if (varA > varB) {\n        comparison = 1;\n      } else if (varA < varB) {\n        comparison = -1;\n      }\n      return (\n        (order === 'desc') ? (comparison * -1) : comparison\n      );\n    };\n  }\n\nexport default compareValues;\n","import React from 'react';\nimport store from '../store/store.js';\nimport compareValues from '../utilities/sort.js';\n\nclass InfiniteTable extends React.Component {\n    constructor(props) {\n        console.log(\"Calling InfiniteTable Constructor\");\n        super(props);\n        store.subscribe(() => { this.forceUpdate() });\n    }\n\n    createRow(rowData) {\n        let row = [];\n        let cellsArray = [];\n        // console.log(\"Row Data\", rowData);\n        for (var field in rowData) {\n            // console.log(rowData[field]);\n            cellsArray.push(<td>{rowData[field]}</td>)\n        }\n        row.push(<tr>{cellsArray}</tr>)\n        return row;\n    }\n\n    componentDidMount() {\n        console.log(\"Calling componentDidMount\");\n        this.loadData(this.props.initialRecordCount);\n        this.refs.iScroll.addEventListener(\"scroll\", () => {\n            if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight) {\n                this.loadData(this.props.additionalRecordCount);\n            }\n        });\n    }\n\n    async loadData(recordCount) {\n        console.log(\"Calling loadData\");\n        let lastLoadedIndex = store.getState().lastLoadedIndex;\n        let resultValue = await fetch('http://localhost:8080/aknms/v1/event?id-from=' + (lastLoadedIndex + 1) + '&count=' + recordCount);\n        let resultJson = await resultValue.json();\n        if (resultJson.length === 0) {\n            console.log(\"loadData - fetch returned empty array\");\n            return;\n        }\n\n        console.log('loadData - Before Sorting', resultJson);\n        const resultJsonDesc = [...resultJson].sort(compareValues('id', 'desc'));\n        console.log('loadData - After Sorting', resultJsonDesc);\n\n        let newlastLoadedIndex = resultJsonDesc[0].id;\n        console.log(\"loadData - newlastLoadedIndex\", newlastLoadedIndex);\n        if (newlastLoadedIndex === lastLoadedIndex) {\n            console.log(\"loadData - returned value is already loaded\");\n            return;\n        }\n\n        let rowdata = resultJson.map((row) => {\n            let newRow = row;\n            newRow.managementIp = row.managedElement.ipAddress;\n            delete newRow.managedElement;\n            return newRow;\n        })\n\n        // console.log(\"loadData - rowdata\", rowdata)\n        rowdata = Object.assign([], store.getState().rowdata.concat(rowdata));\n        store.dispatch({\n            type: \"LOAD_DATA\",\n            rowdata: rowdata,\n            lastLoadedIndex: newlastLoadedIndex\n        });\n    }\n\n    render() {\n        console.log(\"Calling Table Render\");\n        let headers = this.props.headers;\n\n        if (headers === undefined || headers.length === 0) {\n            return (<div className=\"infiniteTable\" ref=\"iScroll\"><b>Error - Table Headers Undefined</b></div>);\n        }\n        console.log(\"render - Headers\", headers);\n        return (\n            <div\n                className=\"infiniteTable\"\n                ref=\"iScroll\"\n                style={{ height: \"600px\", overflow: \"auto\" }}>\n                <table align=\"center\">\n                    <style>{\"table, th, td {border:1px solid black; border-collapse: collapse;}\"}</style>\n                    <tr>\n                        {headers.map(header => (<th>{header.headername}</th>))}\n                    </tr>\n                    {store.getState().rowdata.map(row => (this.createRow(row)))}\n                </table>\n            </div>\n        )\n    };\n};\n\nInfiniteTable.defaultProps = {\n    initialRecordCount: 50,\n    additionalRecordCount: 20\n}\n\n/*\nInfiniteTable.contextTypes = {\n    store : PropTypes.object\n}\n*/\nexport default InfiniteTable;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport EventsTable from \"./EventsTable.jsx\";\nimport RefreshPoller from \"./RefreshPoller.jsx\";\nimport EventsChart from \"./EventsChart.jsx\";\nimport EventsLastSinceFilter from \"./EventsLastSinceFilter.jsx\";\nimport InfiniteTable from './InfiniteTable.jsx';\nimport store from '../store/store.js';\n\nclass EventsPage extends React.Component {\n\n    constructor(props) {\n        console.log(\"Calling EventsPage Constructor\");\n        super(props);\n    }\n\n    headers = [\n        { headername: \"ID\", fieldname: \"id\" },\n        { headername: \"Timestamp\", fieldname: \"timestamp\" },\n        { headername: \"Log Message\", fieldname: \"message\" },\n        { headername: \"Log Type\", fieldname: \"type\" },\n        { headername: \"ManagementIP\", fieldname: \"managementip\" }\n    ];\n\n    render() {\n        return (\n            <div>\n                <h1>AK NMS Events</h1>\n                <EventsChart />\n                {/*\n                <table><tr><td><RefreshPoller /></td><td><EventsLastSinceFilter /></td></tr></table>\n                <hr />\n                <EventsTable/>   */}\n                <InfiniteTable\n                    headers={this.headers}\n                    initialRecordCount='50' \n                    additionalRecordCount='10' />\n            </div>\n        );\n    }\n};\n\n/*EventsPage.contextTypes = {\n    store : PropTypes.object\n}\n*/\n\nexport default EventsPage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport EventsPage from './components/EventsPage.jsx';\n\nReactDOM.render(<EventsPage />, document.getElementById('eventsPage'));"],"sourceRoot":""}